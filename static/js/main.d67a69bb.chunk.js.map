{"version":3,"sources":["hook/useData/index.ts","hook/useTime/index.ts","assets/meteorologia.png","pages/Home/index.tsx","App.tsx","index.tsx"],"names":["itemAux","useTime","useState","time","setTime","second","setTSecond","useEffect","setTimeout","myDate","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","checkTime","i","hs","min","sec","toString","currentTime","Home","data","setData","power","setPower","temperature","setTemperature","temp","setTemp","pow","setPow","setArrayData","arrayDataMinutal","setArrayDataMinutal","a","fetch","headers","response","json","getDataJson","values","map","item","num","value","Number","toFixed","prevState","useData","className","src","logo","alt","ResponsiveContainer","width","height","AreaChart","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","dataKey","stroke","fill","XAxis","angle","y","dy","domain","tickFormatter","str","label","Text","x","dx","YAxis","tickCount","CartesianGrid","opacity","vertical","strokeDasharray","App","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d67a69bb.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useTime } from \"..\";\nimport { ArrayDataGraphic, Data, Value} from \"../../types\";\n\n//EN ESTE HOOK SE MANIPULAN LOS DATOS DEL ARCHIVO data.json PARA REALIZAR EL GRAFICO TENIENDO EN CUENTA LOS DATOS DE LA HORA ACTUAL\n\nlet itemAux: ArrayDataGraphic={}\n\nconst useData = () => {\n\n    const [data, setData] = useState<Data | undefined>()\n    const [power, setPower] = useState<Value[]>();\n    const [temperature, setTemperature] = useState<Value[]>();\n    const [temp, setTemp] = useState('');\n    const [pow, setPow] = useState('');\n    const [arrayData, setArrayData] = useState<ArrayDataGraphic[]>([]);\n    const [arrayDataMinutal, setArrayDataMinutal] = useState<ArrayDataGraphic[]>([]);\n\n    const {time, second} = useTime()\n\n    useEffect(()=>{\n\n        const getDataJson= async()=>{\n            const response = await fetch('data/data.json'\n            ,{\n                headers : { \n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                }\n            }\n            )\n            const data: Data = await response.json()\n            setData(data)\n            \n        }\n        getDataJson()\n\n    },[])\n\n    useEffect(()=>{\n        setTemperature(data?.temperature.values)\n        setPower(data?.power.values)\n\n    },[data]);\n\n    useEffect(() => {\n        \n        \n        \n\n        power?.map((item)=>{\n            if(item.time===time){\n                const num=item.value\n                setPow((((Number(num)*1000)*3600)/5).toFixed(1).toString())\n                itemAux ={\n                    power: (((Number(num)*1000)*3600)/5).toFixed(1).toString(), \n                }\n                \n            } \n        })\n        \n        temperature?.map((item)=>{\n            if(item.time===time){\n                const num=item.value\n                setTemp((Number(num)*0.1-273).toFixed(3).toString())\n                itemAux ={\n                    ...itemAux,\n                    temperature: (Number(num)*0.1-273).toFixed(3).toString(),\n                    time: item.time\n                }\n                setArrayData(prevState=>([...prevState, itemAux]))  \n\n                if(item.time===time && second==='00'){\n                const num=item.value\n                itemAux ={\n                    ...itemAux,\n                    temperature: (Number(num)*0.1-273).toFixed(3).toString(),\n                    time: item.time\n                }\n                    setArrayDataMinutal(prevState=>([...prevState, itemAux]))\n                } \n                \n            } \n        })\n        \n\n    },[time])\n\n    return { power, temperature, arrayDataMinutal, temp, pow}\n}\n\nexport { useData }\n\n","import { useEffect, useState } from \"react\";\n\n//EN ESTE HOOK SE CREA EL RELOJ Y SE SETEAN LOS DATOS DE LA HORA ACTUAL \n//El state \"time\" se actualiza cada un segundo para contrastar la hora actual con el dato horario de cada elemento del archivo de datos\n\nconst useTime = () => {\n\n    const [time, setTime] = useState('');\n    const [second, setTSecond] = useState('');\n\n    useEffect(() => {\n        \n        setTimeout(function showTime () {\n            const myDate = new Date();\n            const hours = myDate.getHours();\n            const minutes = myDate.getMinutes();\n            const seconds = myDate.getSeconds();\n\n            const checkTime =(i:number) =>{\n                if (i < 10) {\n                    const result =`0${i}`;\n                    return result\n                }\n                return i;\n            }\n            const hs= checkTime(hours);\n            const min= checkTime(minutes);\n            const sec= checkTime(seconds);\n            setTSecond(sec.toString())\n\n            const currentTime= `${hs}:${min}:${sec}`\n            setTime(currentTime)\n\n        }, 1000);\n\n    },[time])\n\n    return {time, second}\n}\n\nexport { useTime }","export default __webpack_public_path__ + \"static/media/meteorologia.2ebd27bc.png\";","import { FC } from \"react\";\nimport { useData, useTime } from \"../../hook/\";\nimport logo from '../../assets/meteorologia.png'\nimport {\n    ResponsiveContainer,\n    AreaChart,\n    XAxis,\n    YAxis,\n    Area,\n    CartesianGrid,\n    Text,\n} from \"recharts\";\n\nimport './styles.css'\n\nconst Home :FC= () =>{\n\n    const {time} = useTime()\n    const { arrayDataMinutal, temp, pow} = useData();\n\n    //ESTA FUNCION MUESTRA EL GRAFICO EN PANTALLA:\n    //EL GRAFICO MUESTRA LA TEMPERATURA EN FUNCION DE LA ENERGIA CON UN INTERVALO SE UN MINUTO, LO CUAL SE TRADUCE EN QUE CUANDO PASA DE UN MINUTO A OTRO LA HORA ACTUAL, EL GRAFICO SE RENDERIZA.\n    \n    const chartFunction =()=>{\n        return(\n            <div className=\"chart\">\n                <div>\n                    <ResponsiveContainer width=\"100%\" height={400}>\n                        <AreaChart data={arrayDataMinutal}  margin={{ top: 15, right: 30, left: 30, bottom: 20 }}>\n\n                        <defs>\n                            <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                <stop offset=\"0%\" stopColor=\"#457b9d\" stopOpacity={0.4} />\n                                <stop offset=\"75%\" stopColor=\"#457b9d\" stopOpacity={0.05} />\n                            </linearGradient>\n                        </defs>\n\n                        <Area dataKey=\"temperature\"  stroke=\"#457b9d\" fill=\"url(#color)\"/>\n\n                        <XAxis dataKey=\"power\" angle={10} y={-10} dy={10} domain={[0, 'dataMax']} tickFormatter={(str) => `${str}Kw/h`}\n                        label={\n                            <Text\n                                x={0}\n                                y={0}\n                                dx={80}\n                                dy={400}\n                                offset={0}\n                                angle={0}\n                            >POWER</Text>\n                        }/>\n\n                        <YAxis dataKey=\"temperature\" tickCount={100} domain={[0, 'dataMax']} label={\n                            <Text\n                                x={0}\n                                y={0}\n                                dx={20}\n                                dy={130}\n                                offset={0}\n                                angle={-90}\n                            >TEMPERATURE</Text>\n                        } tickFormatter={(str) => `${str.toFixed(2)}°C`}/>\n\n                        <CartesianGrid opacity={0.6} vertical={false} strokeDasharray=\"3 3\" />\n\n                        </AreaChart>\n                    </ResponsiveContainer>\n                    \n                </div>  \n            </div>)\n    }\n\n    //CON ESTA FUNCION SE MUESTRA EN PANTALLA LOS DATOS DE LA TEMPERATURA Y LA ENERGIA ACTUAL. ESTOS DATOS SE ACTUALIZAN CADA 5 SEGUNDOS. \n    const showCurrentData=()=>{\n        return(\n            <div>\n                <div className=\"container-logo\">\n                    <img src={logo} alt=\"\" className='logo'/>\n                    <h1 className=\"title\">METEOLOGICA</h1>\n                </div>\n                <h2 className=\"title-status\">Current status</h2>\n                <div className=\"current-status\">\n                    <div className=\"status\">\n                        <h3>Current time</h3>\n                        <p className=\"text\">{time}</p>\n                    </div>\n                    <div className=\"status\">\n                        <h3>Current temperature</h3>\n                        <p className=\"text\">{temp} °C</p>\n                    </div>\n                    <div className=\"status\">\n                        <h3>Current power</h3>\n                        <p className=\"text\">{pow} Kw/h</p>\n                    </div>\n                </div>\n            </div>\n            \n        )\n    }\n\n    return(\n        <div className=\"home\">            \n            {showCurrentData()}\n            {chartFunction()}\n        </div>\n    )\n}\n\nexport default Home","import { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\n\n//UTILIZANDO REACT-ROUTER-DOM SE MOSTRARA COMO PANTALLA PRINCIPAL \"HOME\"\n\nfunction App() {\n\n  return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}